import re
import struct

import torch
from transformers import BertTokenizer

class Tokenizer(BertTokenizer):

    # meta tokens
    META_TOKENS = [
        "[PAD]",
        "[UNK]",
        "[CLS]",
        "[SEP]",
        "[MASK]",
        "START",
        "END",
        "PC",
        "INST",
        "RS1",
        "RS2",
        "RD",
        "CSR",
        "FUNCT3",
        "FUNCT7",
        "IMM",
        "TIMESTAMP",
        "BBTIME",
        "ENDBB",
        "8000",
        "80000",
        "800000"
    ]

    # riscv vocabs
    RISC_V_VOCABS = [
        # registers
        "x0",
        "x1",
        "x2",
        "x3",
        "x4",
        "x5",
        "x6",
        "x7",
        "x8",
        "x9",
        "x10",
        "x11",
        "x12",
        "x13",
        "x14",
        "x15",
        "x16",
        "x17",
        "x18",
        "x19",
        "x20",
        "x21",
        "x22",
        "x23",
        "x24",
        "x25",
        "x26",
        "x27",
        "x28",
        "x29",
        "x30",
        "x31",
        "ra",
        "sp",
        "gp",
        "tp",
        "t0",
        "t1",
        "t2",
        "s0",
        "fp",
        "s1",
        "a0",
        "a1",
        "a2",
        "a3",
        "a4",
        "a5",
        "a6",
        "a7",
        "s2",
        "s3",
        "s4",
        "s5",
        "s6",
        "s7",
        "s8",
        "s9",
        "s10",
        "s11",
        "t3",
        "t4",
        "t5",
        "t6",

        # instructions
        "unimp",
        "add",
        "addi",
        "amoadd.w",
        "amoand.w",
        "amomax.w",
        "amomaxu.w",
        "amomin.w",
        "amominu.w",
        "amoor.w",
        "amoswap.w",
        "amoxor.w",
        "and",
        "andi",
        "auipc",
        "beq",
        "bge",
        "bgeu",
        "blt",
        "bltu",
        "bne",
        "c.add",
        "c.addi",
        "c.addi16sp",
        "c.addi4spn",
        "c.and",
        "c.andi",
        "c.beqz",
        "c.bnez",
        "c.ebreak",
        "c.fld",
        "c.fldsp",
        "c.fsd",
        "c.fsdsp",
        "c.j",
        "c.jalr",
        "c.jr",
        "c.li",
        "c.lui",
        "c.lw",
        "c.lwsp",
        "c.mv",
        "c.nop",
        "c.or",
        "c.sub",
        "c.sw",
        "c.swsp",
        "c.xor",
        "csrrc",
        "csrrci",
        "csrrs",
        "csrrsi",
        "csrrw",
        "csrrwi",
        "div",
        "divu",
        "ebreak",
        "ecall",
        "fadd.d",
        "fadd.s",
        "fclass.d",
        "fclass.s",
        "fcvt.d.s",
        "fcvt.d.w",
        "fcvt.d.wu",
        "fcvt.s.d",
        "fcvt.s.w",
        "fcvt.s.wu",
        "fcvt.w.d",
        "fcvt.w.s",
        "fcvt.wu.d",
        "fcvt.wu.s",
        "fdiv.d",
        "fdiv.s",
        "fence",
        "feq.d",
        "feq.s",
        "fld",
        "fle.d",
        "fle.s",
        "flt.d",
        "flt.s",
        "flw",
        "fmadd.d",
        "fmadd.s",
        "fmax.d",
        "fmax.s",
        "fmin.d",
        "fmin.s",
        "fmsub.d",
        "fmsub.s",
        "fmul.d",
        "fmul.s",
        "fmv.w.x",
        "fmv.x.w",
        "fnmadd.d",
        "fnmadd.s",
        "fnmsub.d",
        "fnmsub.s",
        "fsd",
        "fsgnj.d",
        "fsgnj.s",
        "fsgnjn.d",
        "fsgnjn.s",
        "fsgnjx.d",
        "fsgnjx.s",
        "fsqrt.d",
        "fsqrt.s",
        "fsub.d",
        "fsub.s",
        "fsw",
        "jal",
        "jalr",
        "lb",
        "lbu",
        "lh",
        "lhu",
        "lr.w",
        "lui",
        "lw",
        "mret",
        "mul",
        "mulh",
        "mulhsu",
        "mulhu",
        "or",
        "ori",
        "rem",
        "remu",
        "sb",
        "sc.w",
        "sh",
        "sll",
        "slt",
        "slti",
        "sltiu",
        "sltu",
        "sra",
        "srl",
        "sub",
        "sw",
        "vaadd.vv",
        "vaadd.vx",
        "vaaddu.vv",
        "vaaddu.vx",
        "vadc.vim",
        "vadc.vvm",
        "vadc.vxm",
        "vadd.vi",
        "vadd.vv",
        "vadd.vx",
        "vand.vi",
        "vand.vv",
        "vand.vx",
        "vasub.vv",
        "vasub.vx",
        "vasubu.vv",
        "vasubu.vx",
        "vcompress.vm",
        "vcpop.m",
        "vdiv.vv",
        "vdiv.vx",
        "vdivu.vv",
        "vdivu.vx",
        "vfadd.vf",
        "vfadd.vv",
        "vfclass.v",
        "vfcvt.f.x",
        "vfcvt.f.xu",
        "vfcvt.rtz.x",
        "vfcvt.rtz.xu",
        "vfcvt.x.f",
        "vfcvt.xu.f",
        "vfdiv.vf",
        "vfdiv.vv",
        "vfirst.m",
        "vfmacc.vf",
        "vfmacc.vv",
        "vfmadd.vf",
        "vfmadd.vv",
        "vfmax.vf",
        "vfmax.vv",
        "vfmerge.vfm",
        "vfmin.vf",
        "vfmin.vv",
        "vfmsac.vf",
        "vfmsac.vv",
        "vfmsub.vf",
        "vfmsub.vv",
        "vfmul.vf",
        "vfmul.vv",
        "vfmv.f.s",
        "vfmv.s.f",
        "vfmv.v.f",
        "vfncvt.f.f",
        "vfncvt.f.x",
        "vfncvt.f.xu",
        "vfncvt.rod.f",
        "vfncvt.rtz.x",
        "vfncvt.rtz.xu",
        "vfncvt.x.f",
        "vfncvt.xu.f",
        "vfnmacc.vf",
        "vfnmacc.vv",
        "vfnmadd.vf",
        "vfnmadd.vv",
        "vfnmsac.vf",
        "vfnmsac.vv",
        "vfnmsub.vf",
        "vfnmsub.vv",
        "vfrdiv.vf",
        "vfrec7.v",
        "vfredmax.vs",
        "vfredmin.vs",
        "vfredosum.vs",
        "vfredusum.vs",
        "vfrsqrt7.v",
        "vfrsub.vf",
        "vfsgnj.vf",
        "vfsgnj.vv",
        "vfsgnjn.vf",
        "vfsgnjn.vv",
        "vfsgnjx.vf",
        "vfsgnjx.vv",
        "vfslide1down.vf",
        "vfslide1up.vf",
        "vfsqrt.v",
        "vfsub.vf",
        "vfsub.vv",
        "vfwadd.vf",
        "vfwadd.vv",
        "vfwadd.wf",
        "vfwadd.wv",
        "vfwcvt.f.f",
        "vfwcvt.f.x",
        "vfwcvt.f.xu",
        "vfwcvt.rtz.x",
        "vfwcvt.rtz.xu",
        "vfwcvt.x.f",
        "vfwcvt.xu.f",
        "vfwmacc.vf",
        "vfwmacc.vv",
        "vfwmsac.vf",
        "vfwmsac.vv",
        "vfwmul.vf",
        "vfwmul.vv",
        "vfwnmacc.vf",
        "vfwnmacc.vv",
        "vfwnmsac.vf",
        "vfwnmsac.vv",
        "vfwredosum.vs",
        "vfwredusum.vs",
        "vfwsub.vf",
        "vfwsub.vv",
        "vfwsub.wf",
        "vfwsub.wv",
        "vid.v",
        "viota.m",
        "vl1re16.v",
        "vl1re32.v",
        "vl1re64.v",
        "vl1re8.v",
        "vl2re16.v",
        "vl2re32.v",
        "vl2re64.v",
        "vl2re8.v",
        "vl4re16.v",
        "vl4re32.v",
        "vl4re64.v",
        "vl4re8.v",
        "vl8re16.v",
        "vl8re32.v",
        "vl8re64.v",
        "vl8re8.v",
        "vle16.v",
        "vle16ff.v",
        "vle32.v",
        "vle32ff.v",
        "vle64.v",
        "vle64ff.v",
        "vle8.v",
        "vle8ff.v",
        "vlm.v",
        "vloxei16.v",
        "vloxei32.v",
        "vloxei64.v",
        "vloxei8.v",
        "vlse16.v",
        "vlse32.v",
        "vlse64.v",
        "vlse8.v",
        "vluxei16.v",
        "vluxei32.v",
        "vluxei64.v",
        "vluxei8.v",
        "vmacc.vv",
        "vmacc.vx",
        "vmadc.vi",
        "vmadc.vim",
        "vmadc.vv",
        "vmadc.vvm",
        "vmadc.vx",
        "vmadc.vxm",
        "vmadd.vv",
        "vmadd.vx",
        "vmand.mm",
        "vmandn.mm",
        "vmax.vv",
        "vmax.vx",
        "vmaxu.vv",
        "vmaxu.vx",
        "vmerge.vim",
        "vmerge.vvm",
        "vmerge.vxm",
        "vmfeq.vf",
        "vmfeq.vv",
        "vmfge.vf",
        "vmfgt.vf",
        "vmfle.vf",
        "vmfle.vv",
        "vmflt.vf",
        "vmflt.vv",
        "vmfne.vf",
        "vmfne.vv",
        "vmin.vv",
        "vmin.vx",
        "vminu.vv",
        "vminu.vx",
        "vmnand.mm",
        "vmnor.mm",
        "vmor.mm",
        "vmorn.mm",
        "vmsbc.vv",
        "vmsbc.vvm",
        "vmsbc.vx",
        "vmsbc.vxm",
        "vmsbf.m",
        "vmseq.vi",
        "vmseq.vv",
        "vmseq.vx",
        "vmsgt.vi",
        "vmsgt.vx",
        "vmsgtu.vi",
        "vmsgtu.vx",
        "vmsif.m",
        "vmsle.vi",
        "vmsle.vv",
        "vmsle.vx",
        "vmsleu.vi",
        "vmsleu.vv",
        "vmsleu.vx",
        "vmslt.vv",
        "vmslt.vx",
        "vmsltu.vv",
        "vmsltu.vx",
        "vmsne.vi",
        "vmsne.vv",
        "vmsne.vx",
        "vmsof.m",
        "vmul.vv",
        "vmul.vx",
        "vmulh.vv",
        "vmulh.vx",
        "vmulhsu.vv",
        "vmulhsu.vx",
        "vmulhu.vv",
        "vmulhu.vx",
        "vmv1r.v",
        "vmv2r.v",
        "vmv4r.v",
        "vmv8r.v",
        "vmv.s.x",
        "vmv.v.i",
        "vmv.v.v",
        "vmv.v.x",
        "vmv.x.s",
        "vmxnor.mm",
        "vmxor.mm",
        "vnclip.wi",
        "vnclip.wv",
        "vnclip.wx",
        "vnclipu.wi",
        "vnclipu.wv",
        "vnclipu.wx",
        "vnmsac.vv",
        "vnmsac.vx",
        "vnmsub.vv",
        "vnmsub.vx",
        "vnsra.wi",
        "vnsra.wv",
        "vnsra.wx",
        "vnsrl.wi",
        "vnsrl.wv",
        "vnsrl.wx",
        "vor.vi",
        "vor.vv",
        "vor.vx",
        "vredand.vs",
        "vredmax.vs",
        "vredmaxu.vs",
        "vredmin.vs",
        "vredminu.vs",
        "vredor.vs",
        "vredsum.vs",
        "vredxor.vs",
        "vrem.vv",
        "vrem.vx",
        "vremu.vv",
        "vremu.vx",
        "vrgather.vi",
        "vrgather.vv",
        "vrgather.vx",
        "vrgatherei16.vv",
        "vrsub.vi",
        "vrsub.vx",
        "vs1r.v",
        "vs2r.v",
        "vs4r.v",
        "vs8r.v",
        "vsadd.vi",
        "vsadd.vv",
        "vsadd.vx",
        "vsaddu.vi",
        "vsaddu.vv",
        "vsaddu.vx",
        "vsbc.vvm",
        "vsbc.vxm",
        "vse16.v",
        "vse32.v",
        "vse64.v",
        "vse8.v",
        "vsetivli",
        "vsetvl",
        "vsetvli",
        "vsext.vf2",
        "vsext.vf4",
        "vsext.vf8",
        "vslide1down.vx",
        "vslide1up.vx",
        "vslidedown.vi",
        "vslidedown.vx",
        "vslideup.vi",
        "vslideup.vx",
        "vsll.vi",
        "vsll.vv",
        "vsll.vx",
        "vsm.v",
        "vsmul.vv",
        "vsmul.vx",
        "vsoxei16.v",
        "vsoxei32.v",
        "vsoxei64.v",
        "vsoxei8.v",
        "vsra.vi",
        "vsra.vv",
        "vsra.vx",
        "vsrl.vi",
        "vsrl.vv",
        "vsrl.vx",
        "vsse16.v",
        "vsse32.v",
        "vsse64.v",
        "vsse8.v",
        "vssra.vi",
        "vssra.vv",
        "vssra.vx",
        "vssrl.vi",
        "vssrl.vv",
        "vssrl.vx",
        "vssub.vv",
        "vssub.vx",
        "vssubu.vv",
        "vssubu.vx",
        "vsub.vv",
        "vsub.vx",
        "vsuxei16.v",
        "vsuxei32.v",
        "vsuxei64.v",
        "vsuxei8.v",
        "vwadd.vv",
        "vwadd.vx",
        "vwadd.wv",
        "vwadd.wx",
        "vwaddu.vv",
        "vwaddu.vx",
        "vwaddu.wv",
        "vwaddu.wx",
        "vwmacc.vv",
        "vwmacc.vx",
        "vwmaccsu.vv",
        "vwmaccsu.vx",
        "vwmaccu.vv",
        "vwmaccu.vx",
        "vwmaccus.vx",
        "vwmul.vv",
        "vwmul.vx",
        "vwmulsu.vv",
        "vwmulsu.vx",
        "vwmulu.vv",
        "vwmulu.vx",
        "vwredsum.vs",
        "vwredsumu.vs",
        "vwsub.vv",
        "vwsub.vx",
        "vwsub.wv",
        "vwsub.wx",
        "vwsubu.vv",
        "vwsubu.vx",
        "vwsubu.wv",
        "vwsubu.wx",
        "vxor.vi",
        "vxor.vv",
        "vxor.vx",
        "vzext.vf2",
        "vzext.vf4",
        "vzext.vf8",
        "wfi",
        "xor",
        "xori",

        # 32 bits
        "c.flw",
        "c.flwsp",
        "c.fsw",
        "c.fswsp",
        "c.jal",

        # 64 bits
        "addiw",
        "addw",
        "amoadd.d",
        "amoand.d",
        "amomax.d",
        "amomaxu.d",
        "amomin.d",
        "amominu.d",
        "amoor.d",
        "amoswap.d",
        "amoxor.d",
        "c.addiw",
        "c.addw",
        "c.ld",
        "c.ldsp",
        "c.sd",
        "c.sdsp",
        "c.slli",
        "c.srai",
        "c.srli",
        "c.subw",
        "divuw",
        "divw",
        "fcvt.d.l",
        "fcvt.d.lu",
        "fcvt.l.d",
        "fcvt.l.s",
        "fcvt.lu.d",
        "fcvt.lu.s",
        "fcvt.s.l",
        "fcvt.s.lu",
        "fmv.d.x",
        "fmv.x.d",
        "ld",
        "lr.d",
        "lwu",
        "mulw",
        "remuw",
        "remw",
        "sc.d",
        "sd",
        "slli",
        "slliw",
        "sllw",
        "srai",
        "sraiw",
        "sraw",
        "srli",
        "srliw",
        "srlw",
        "subw",
    ]

    def __init__(self, vocab_file: str | None = None):
        if vocab_file is None:
            self._generate_vocab()
            vocab_file = "vocab/riscv_vocab.txt"
        else:
            with open(vocab_file, "r") as f:
                vocab_content = f.read().strip().split("\n")
                self.total_tokens = len(vocab_content)

        super().__init__(
            vocab_file=vocab_file,
            do_lower_case=False,
            do_basic_tokenize=True,
            never_split=Tokenizer.RISC_V_VOCABS,
            unk_token="[UNK]",
            sep_token="[SEP]",
            pad_token="[PAD]",
            cls_token="[CLS]",
            mask_token="[MASK]",
            tokenize_chinese_chars=False,
        )
        pass

    def _generate_vocab(self):
        vocab_content = []

        # meta tokens
        for token in Tokenizer.META_TOKENS:
            vocab_content.append(token)

        # riscv vocabs
        for vocab in Tokenizer.RISC_V_VOCABS:
            vocab_content.append(vocab)

        # numbers
        vocab_content.append("-")
        for i in range(10000):
            vocab_content.append(str(i))

        num_lines = len(vocab_content)

        # total_tokens = 30523
        self.total_tokens = num_lines

        # Calculate how many unused tokens to add
        unused_lines = self.total_tokens - num_lines
        print(f"Current vocabulary has {num_lines} tokens. Adding {unused_lines} unused tokens.")

        for i in range(unused_lines):
            vocab_content.append(f"[unused{i}]")

        # Then append the unused tokens
        with open("vocab/riscv_vocab.txt", "w") as f:
            for token in vocab_content:
                f.write(f"{token}\n")

        print(f"Updated vocabulary file now has {self.total_tokens} tokens.")

    def __call__(self, text: str, return_tensors: str = "pt", max_length: int = 32) -> dict:
        tokens = super().__call__(text,
                                return_tensors=return_tensors,
                                truncation=True,
                                max_length=max_length,  # max possible sequence length
                                padding="max_length",
                                # padding="do_not_pad",
                                )
        return tokens

    @property
    def num_tokens(self) -> int:
        return self.total_tokens
